{"version":3,"sources":["../index.js"],"names":[],"mappings":";;;;;;;;;;IAAM,O;;;;;;AAKJ,yBAAqB;AAAA,QAAP,GAAO,QAAP,GAAO;;AAAA;;AACnB,SAAK,aAAL,GAAqB;AACnB,cAAQ,MADW;AAEnB,eAAS;AACP,wBAAgB;AADT,OAFU;AAKnB,mBAAa;AALM,KAArB;;AAQA,SAAK,IAAL,GAAY,GAAZ;;;AAGA,SAAK,OAAL,GAAe,EAAf;AACD;;;;;;;;;;;;;iCAS0C;AAAA,UAAnC,aAAmC,SAAnC,aAAmC;AAAA,UAApB,MAAoB,SAApB,KAAoB;AAAA,UAAb,SAAa,SAAb,SAAa;;AACzC,UAAI,UAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAK,aAAvB,CAAd;AACA,UAAI,OAAO;AACT,oCADS;AAET,qBAFS;AAGT,mBAAW,KAAK,SAAL,CAAe,SAAf;AAHF,OAAX;AAKA,cAAQ,IAAR,GAAe,KAAK,SAAL,CAAe,IAAf,CAAf;AACA,aAAO,MAAM,KAAK,IAAX,EAAiB,OAAjB,EACJ,IADI,CACC;AAAA,eAAO,IAAI,IAAJ,EAAP;AAAA,OADD,EAEJ,IAFI,CAEC;AAAA,eACJ,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAE/B,cAAI,SAAS,MAAT,IAAmB,SAAS,MAAT,CAAgB,MAAvC,EAA+C;AAC7C,mBAAO,QAAP;AACD;AACD,kBAAQ,QAAR;AACD,SAND,CADI;AAAA,OAFD,CAAP;AAWD;;;;;;;;;6BAMQ;AACP,aAAO,KAAK,IAAZ;AACD;;;;;;;;;2BAMM,G,EAAK;AACV,WAAK,IAAL,GAAY,GAAZ;AACD;;;;;;;;;;iCAOY,Y,EAAc;AAAA;;AACzB,UAAI,WAAW,EAAf;;;AAGA,UAAI,mBAAmB,aAAa,MAAb,CAAoB,mBAAW;AACpD,YAAI,MAAK,OAAL,CAAa,OAAb,CAAJ,EAA2B;;AAEzB,mBAAS,OAAT,IAAoB,MAAK,OAAL,CAAa,OAAb,CAApB;AACA,iBAAO,KAAP;AACD;AACD,eAAO,IAAP;AACD,OAPsB,CAAvB;;;AAUA,UAAI,CAAC,iBAAiB,MAAtB,EAA8B;AAC5B,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,kBAAQ,EAAE,MAAM,QAAR,EAAR;AACD,SAFM,CAAP;AAGD;;;AAGD,UAAI,gBAAgB,iBAAiB,GAAjB,CAAqB;AAAA,eACpC,IADoC,wBACb,IADa;AAAA,OAArB,CAApB;;AAMA,UAAI,sCAEE,cAAc,IAAd,CAAmB,IAAnB,CAFF,mLAAJ;;AAcA,UAAI,UAAU,OAAO,MAAP,CAAc,EAAd,EAAkB,KAAK,aAAvB,CAAd;AACA,cAAQ,IAAR,GAAe,KAAK,SAAL,CAAe,EAAE,YAAF,EAAf,CAAf;AACA,aAAO,MAAM,KAAK,IAAX,EAAiB,OAAjB,EACJ,IADI,CACC;AAAA,eAAO,IAAI,IAAJ,EAAP;AAAA,OADD,EAEJ,IAFI,CAEC;AAAA,YAAG,IAAH,SAAG,IAAH;AAAA,YAAS,MAAT,SAAS,MAAT;AAAA,eACJ,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAE/B,cAAI,WAAW,OAAO,MAAP,CAAc,QAAd,EAAwB,IAAxB,CAAf;AACA,cAAI,UAAU,OAAO,MAArB,EAA6B;AAC3B,mBAAO,EAAE,MAAM,QAAR,EAAkB,cAAlB,EAAP;AACD;;AAED,eAAK,IAAI,GAAT,IAAgB,IAAhB,EAAsB;AACpB,gBAAI,KAAK,cAAL,CAAoB,GAApB,CAAJ,EAA8B;AAC5B,oBAAK,OAAL,CAAa,GAAb,IAAoB,KAAK,GAAL,CAApB;AACD;AACF;AACD,kBAAQ,EAAE,MAAM,QAAR,EAAkB,cAAlB,EAAR;AACD,SAbD,CADI;AAAA,OAFD,CAAP;AAkBD;;;;;;kBAGY,O","file":"fetchql.js","sourcesContent":["class FetchQL {\n  /**\n   * FetchQL Class\n   * @param {String} url - the server address of GraphQL\n   */\n  constructor({ url }) {\n    this.requestObject = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n    };\n\n    this._url = url;\n\n    // using for caching enums' type\n    this.EnumMap = {};\n  }\n\n  /**\n   *\n   * @param {String} operationName\n   * @param {String} query\n   * @param {Object} variables\n   * @returns {Promise}\n   */\n  query({ operationName, query, variables }) {\n    let options = Object.assign({}, this.requestObject);\n    let body = {\n      operationName,\n      query,\n      variables: JSON.stringify(variables)\n    };\n    options.body = JSON.stringify(body);\n    return fetch(this._url, options)\n      .then(res => res.json())\n      .then(response => (\n        new Promise((resolve, reject) => {\n          // if any errors, reject the promise\n          if (response.errors && response.errors.length) {\n            reject(response);\n          }\n          resolve(response);\n        })\n      ));\n  }\n\n  /**\n   * get current server address\n   * @returns {String}\n   */\n  getUrl() {\n    return this._url;\n  }\n\n  /**\n   * setting a new server address\n   * @param {String} url\n   */\n  setUrl(url) {\n    this._url = url;\n  }\n\n  /**\n   * get information of enum type\n   * @param [String]EnumNameList - array of enums' name\n   * @returns {Promise}\n   */\n  getEnumTypes(EnumNameList) {\n    var fullData = {};\n\n    // check cache status\n    let unCachedEnumList = EnumNameList.filter(element => {\n      if (this.EnumMap[element]) {\n        // enum has been cached\n        fullData[element] = this.EnumMap[element];\n        return false;\n      }\n      return true;\n    });\n    \n    // immediately return the data if all enums have been cached\n    if (!unCachedEnumList.length) {\n      return new Promise((resolve) => {\n        resolve({ data: fullData });\n      });\n    }\n\n    // build query string for uncached enums\n    let EnumTypeQuery = unCachedEnumList.map(type => (\n      `${type}: __type(name: \"${type}\") {\n        ...EnumFragment\n      }`\n    ));\n    \n    let query = `\n      query {\n        ${EnumTypeQuery.join('\\n')}\n      }\n      \n      fragment EnumFragment on __Type {\n        kind\n        description\n        enumValues {\n          name\n          description\n        }\n      }`;\n    \n    let options = Object.assign({}, this.requestObject);\n    options.body = JSON.stringify({ query });\n    return fetch(this._url, options)\n      .then(res => res.json())\n      .then(({ data, errors }) => (\n        new Promise((resolve, reject) => {\n          // merge enums' data\n          let passData = Object.assign(fullData, data);\n          if (errors && errors.length) {\n            reject({ data: passData, errors });\n          }\n          // cache new enums' data\n          for (var key in data) {\n            if (data.hasOwnProperty(key)) {\n              this.EnumMap[key] = data[key];\n            }\n          }\n          resolve({ data: passData, errors });\n        })\n      ));\n  }\n}\n\nexport default FetchQL;\n"]}