{"ast":null,"code":"export const getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\n  const R = 6371; // Radius of the earth in km\n\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n  const dLon = deg2rad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // Distance in km\n\n  return d;\n};\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}","map":{"version":3,"sources":["D:/GitHub/party_live_web/src/getDistance.js"],"names":["getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI"],"mappings":"AAAA,OAAO,MAAMA,yBAAyB,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,KAA4B;AACnE,QAAMC,CAAC,GAAG,IAAV,CADmE,CACnD;;AAChB,QAAMC,IAAI,GAAGC,OAAO,CAACJ,IAAI,GAAGF,IAAR,CAApB,CAFmE,CAEhC;;AACnC,QAAMO,IAAI,GAAGD,OAAO,CAACH,IAAI,GAAGF,IAAR,CAApB;AACA,QAAMO,CAAC,GACLC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GACAI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACN,IAAD,CAAhB,IACES,IAAI,CAACE,GAAL,CAASL,OAAO,CAACJ,IAAD,CAAhB,CADF,GAEEO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CAFF,GAGEE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CALJ;AAMA,QAAMK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CAAd;AACA,QAAMO,CAAC,GAAGX,CAAC,GAAGQ,CAAd,CAXmE,CAWlD;;AACjB,SAAOG,CAAP;AACD,CAbM;;AAeP,SAAST,OAAT,CAAiBU,GAAjB,EAAsB;AACpB,SAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAU,GAAd,CAAV;AACD","sourcesContent":["export const getDistanceFromLatLonInKm = (lat1, lon1, lat2, lon2) => {\r\n  const R = 6371; // Radius of the earth in km\r\n  const dLat = deg2rad(lat2 - lat1); // deg2rad below\r\n  const dLon = deg2rad(lon2 - lon1);\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(deg2rad(lat1)) *\r\n      Math.cos(deg2rad(lat2)) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c; // Distance in km\r\n  return d;\r\n};\r\n\r\nfunction deg2rad(deg) {\r\n  return deg * (Math.PI / 180);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}