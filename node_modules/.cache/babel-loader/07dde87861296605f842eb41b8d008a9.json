{"ast":null,"code":"const numberDayNow = new Date().getDay() === 0 ? 6 : new Date().getDay() - 1;\nlet numberDayYest;\n\nif (new Date().getDay() === 0) {\n  numberDayYest = 5;\n} else if (new Date().getDay() === 1) {\n  numberDayYest = 6;\n} else {\n  numberDayYest = new Date().getDay() - 2;\n}\n\nconst HtoMs = 3600000,\n      MtoMs = 60000;\nconst currentTimeMS = new Date().getHours() * HtoMs + new Date().getMinutes() * MtoMs;\nexport const isShowStreamNow = (item, setShowStream) => {\n  const yesterdayStream = item.streams[0].schedules[numberDayYest],\n        todayStream = item.streams[0].schedules[numberDayNow];\n  const startYesterdayStreamMS = yesterdayStream.start_time.split(\":\")[0] * HtoMs + yesterdayStream.start_time.split(\":\")[1] * MtoMs;\n  const endYesterdayStreamMS = yesterdayStream.end_time.split(\":\")[0] * HtoMs + yesterdayStream.end_time.split(\":\")[1] * MtoMs;\n  const startTodayStreamMS = todayStream.start_time.split(\":\")[0] * HtoMs + todayStream.start_time.split(\":\")[1] * MtoMs;\n  const endTodayStreamMS = todayStream.end_time.split(\":\")[0] * HtoMs + todayStream.end_time.split(\":\")[1] * MtoMs;\n\n  if (startYesterdayStreamMS > endYesterdayStreamMS && endYesterdayStreamMS > currentTimeMS) {\n    // идет видео за вчерашний день ещe\n    setShowStream(true);\n  } else if (startTodayStreamMS > endTodayStreamMS && currentTimeMS > startTodayStreamMS) {\n    // если видео началось сегодня и закончилось завтра\n    setShowStream(true);\n  } else if (startTodayStreamMS < endTodayStreamMS && currentTimeMS > startTodayStreamMS && currentTimeMS < endTodayStreamMS) {\n    // началось и закончилось сегодня\n    setShowStream(true);\n  } else {\n    setShowStream(false);\n  }\n};\nexport const isWorkTimeNow = (item, setWorkTime, setIsWork) => {\n  const yesterdayWorkTime = item.schedules[numberDayYest],\n        todayWorkTime = item.schedules[numberDayNow];\n  const endYesterdayMS = yesterdayWorkTime.end_time.split(\":\")[0] * HtoMs + yesterdayWorkTime.end_time.split(\":\")[1] * MtoMs;\n  const startYesterdayMS = yesterdayWorkTime.start_time.split(\":\")[0] * HtoMs + yesterdayWorkTime.start_time.split(\":\")[1] * MtoMs;\n  const endTodayMS = todayWorkTime.end_time.split(\":\")[0] * HtoMs + todayWorkTime.end_time.split(\":\")[1] * MtoMs;\n  const startTodayMS = todayWorkTime.start_time.split(\":\")[0] * HtoMs + todayWorkTime.start_time.split(\":\")[1] * MtoMs;\n\n  if (startYesterdayMS > endYesterdayMS && endYesterdayMS > currentTimeMS) {\n    // идет работа за вчерашний день ещe\n    setIsWork(true);\n    setWorkTime(yesterdayWorkTime.start_time.split(\":\")[0] + \":\" + yesterdayWorkTime.start_time.split(\":\")[1] + \"-\" + yesterdayWorkTime.end_time.split(\":\")[0] + \":\" + yesterdayWorkTime.end_time.split(\":\")[1]);\n  } else if (startTodayMS > endTodayMS && currentTimeMS > startTodayMS) {\n    // если работа началось сегодня и закончилось завтра\n    setIsWork(true);\n    setWorkTime(todayWorkTime.start_time.split(\":\")[0] + \":\" + todayWorkTime.start_time.split(\":\")[1] + \"-\" + todayWorkTime.end_time.split(\":\")[0] + \":\" + todayWorkTime.end_time.split(\":\")[1]);\n  } else if (startTodayMS < endTodayMS && currentTimeMS > startTodayMS && currentTimeMS < endTodayMS) {\n    // началось и закончилось сегодня\n    setIsWork(true);\n    setWorkTime(todayWorkTime.start_time.split(\":\")[0] + \":\" + todayWorkTime.start_time.split(\":\")[1] + \"-\" + todayWorkTime.end_time.split(\":\")[0] + \":\" + todayWorkTime.end_time.split(\":\")[1]);\n  } else {\n    setIsWork(false);\n    setWorkTime(\"_Закрыто_ \" + todayWorkTime.start_time.split(\":\")[0] + \":\" + todayWorkTime.start_time.split(\":\")[1] + \"-\" + todayWorkTime.end_time.split(\":\")[0] + \":\" + todayWorkTime.end_time.split(\":\")[1]);\n  }\n};","map":{"version":3,"sources":["D:/GitHub/party_live_web/src/calculateTime.js"],"names":["numberDayNow","Date","getDay","numberDayYest","HtoMs","MtoMs","currentTimeMS","getHours","getMinutes","isShowStreamNow","item","setShowStream","yesterdayStream","streams","schedules","todayStream","startYesterdayStreamMS","start_time","split","endYesterdayStreamMS","end_time","startTodayStreamMS","endTodayStreamMS","isWorkTimeNow","setWorkTime","setIsWork","yesterdayWorkTime","todayWorkTime","endYesterdayMS","startYesterdayMS","endTodayMS","startTodayMS"],"mappings":"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","sourcesContent":["const numberDayNow = new Date().getDay() === 0 ? 6 : new Date().getDay() - 1;\r\nlet numberDayYest;\r\n\r\nif (new Date().getDay() === 0) {\r\n  numberDayYest = 5;\r\n} else if (new Date().getDay() === 1) {\r\n  numberDayYest = 6;\r\n} else {\r\n  numberDayYest = new Date().getDay() - 2;\r\n}\r\n\r\nconst HtoMs = 3600000,\r\n  MtoMs = 60000;\r\n\r\nconst currentTimeMS =\r\n  new Date().getHours() * HtoMs + new Date().getMinutes() * MtoMs;\r\n\r\nexport const isShowStreamNow = (item, setShowStream) => {\r\n  const yesterdayStream = item.streams[0].schedules[numberDayYest],\r\n    todayStream = item.streams[0].schedules[numberDayNow];\r\n\r\n  const startYesterdayStreamMS =\r\n    yesterdayStream.start_time.split(\":\")[0] * HtoMs +\r\n    yesterdayStream.start_time.split(\":\")[1] * MtoMs;\r\n  const endYesterdayStreamMS =\r\n    yesterdayStream.end_time.split(\":\")[0] * HtoMs +\r\n    yesterdayStream.end_time.split(\":\")[1] * MtoMs;\r\n\r\n  const startTodayStreamMS =\r\n    todayStream.start_time.split(\":\")[0] * HtoMs +\r\n    todayStream.start_time.split(\":\")[1] * MtoMs;\r\n  const endTodayStreamMS =\r\n    todayStream.end_time.split(\":\")[0] * HtoMs +\r\n    todayStream.end_time.split(\":\")[1] * MtoMs;\r\n\r\n  if (\r\n    startYesterdayStreamMS > endYesterdayStreamMS &&\r\n    endYesterdayStreamMS > currentTimeMS\r\n  ) {\r\n    // идет видео за вчерашний день ещe\r\n    setShowStream(true);\r\n  } else if (\r\n    startTodayStreamMS > endTodayStreamMS &&\r\n    currentTimeMS > startTodayStreamMS\r\n  ) {\r\n    // если видео началось сегодня и закончилось завтра\r\n    setShowStream(true);\r\n  } else if (\r\n    startTodayStreamMS < endTodayStreamMS &&\r\n    currentTimeMS > startTodayStreamMS &&\r\n    currentTimeMS < endTodayStreamMS\r\n  ) {\r\n    // началось и закончилось сегодня\r\n    setShowStream(true);\r\n  } else {\r\n    setShowStream(false);\r\n  }\r\n};\r\n\r\nexport const isWorkTimeNow = (item, setWorkTime, setIsWork) => {\r\n  const yesterdayWorkTime = item.schedules[numberDayYest],\r\n    todayWorkTime = item.schedules[numberDayNow];\r\n\r\n  const endYesterdayMS =\r\n    yesterdayWorkTime.end_time.split(\":\")[0] * HtoMs +\r\n    yesterdayWorkTime.end_time.split(\":\")[1] * MtoMs;\r\n  const startYesterdayMS =\r\n    yesterdayWorkTime.start_time.split(\":\")[0] * HtoMs +\r\n    yesterdayWorkTime.start_time.split(\":\")[1] * MtoMs;\r\n  const endTodayMS =\r\n    todayWorkTime.end_time.split(\":\")[0] * HtoMs +\r\n    todayWorkTime.end_time.split(\":\")[1] * MtoMs;\r\n  const startTodayMS =\r\n    todayWorkTime.start_time.split(\":\")[0] * HtoMs +\r\n    todayWorkTime.start_time.split(\":\")[1] * MtoMs;\r\n\r\n  if (startYesterdayMS > endYesterdayMS && endYesterdayMS > currentTimeMS) {\r\n    // идет работа за вчерашний день ещe\r\n    setIsWork(true);\r\n    setWorkTime(\r\n      yesterdayWorkTime.start_time.split(\":\")[0] +\r\n        \":\" +\r\n        yesterdayWorkTime.start_time.split(\":\")[1] +\r\n        \"-\" +\r\n        yesterdayWorkTime.end_time.split(\":\")[0] +\r\n        \":\" +\r\n        yesterdayWorkTime.end_time.split(\":\")[1]\r\n    );\r\n  } else if (startTodayMS > endTodayMS && currentTimeMS > startTodayMS) {\r\n    // если работа началось сегодня и закончилось завтра\r\n    setIsWork(true);\r\n    setWorkTime(\r\n      todayWorkTime.start_time.split(\":\")[0] +\r\n        \":\" +\r\n        todayWorkTime.start_time.split(\":\")[1] +\r\n        \"-\" +\r\n        todayWorkTime.end_time.split(\":\")[0] +\r\n        \":\" +\r\n        todayWorkTime.end_time.split(\":\")[1]\r\n    );\r\n  } else if (\r\n    startTodayMS < endTodayMS &&\r\n    currentTimeMS > startTodayMS &&\r\n    currentTimeMS < endTodayMS\r\n  ) {\r\n    // началось и закончилось сегодня\r\n    setIsWork(true);\r\n    setWorkTime(\r\n      todayWorkTime.start_time.split(\":\")[0] +\r\n        \":\" +\r\n        todayWorkTime.start_time.split(\":\")[1] +\r\n        \"-\" +\r\n        todayWorkTime.end_time.split(\":\")[0] +\r\n        \":\" +\r\n        todayWorkTime.end_time.split(\":\")[1]\r\n    );\r\n  } else {\r\n    setIsWork(false);\r\n    setWorkTime(\r\n      \"_Закрыто_ \" +\r\n        todayWorkTime.start_time.split(\":\")[0] +\r\n        \":\" +\r\n        todayWorkTime.start_time.split(\":\")[1] +\r\n        \"-\" +\r\n        todayWorkTime.end_time.split(\":\")[0] +\r\n        \":\" +\r\n        todayWorkTime.end_time.split(\":\")[1]\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}