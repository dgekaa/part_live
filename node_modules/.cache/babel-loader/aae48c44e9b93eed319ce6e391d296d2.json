{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\party_live_web\\\\src\\\\pages\\\\home\\\\Home.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport CompanyNav from \"../../components/companyNav/CompanyNav\";\nimport TypeNav from \"../../components/typeNav/TypeNav\";\nimport SmallCompanyBlock from \"../../components/smallCompanyBlock/SmallCompanyBlock\";\nimport SlideSideMenu from \"../../components/slideSideMenu/SlideSideMenu\";\nimport BottomMenu from \"../../components/bottomMenu/BottomMenu\";\nimport Header from \"../../components/header/Header\";\nimport Loader from \"../../components/loader/Loader\";\nimport \"./home.css\";\nimport QUERY from \"../../query\";\n\nconst Home = props => {\n  const [DATA, setDATA] = useState([]);\n  const [companyData, setCompanyData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    QUERY({\n      query: `query {\n        places {\n          id name address description logo menu actions coordinates\n          streams{url name id preview\n            schedules{id day start_time end_time}\n          }\n          schedules {id day start_time end_time}\n          categories {id name}\n        }\n      }`\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setIsLoading(false);\n      setCompanyData(data.data.places);\n      setDATA(data.data.places);\n    }).catch(err => {\n      console.log(err, \"  ERR\");\n    });\n  }, []);\n\n  const clickedType = type => {\n    if (type) {\n      const filteredData = DATA.filter(el => el.categories[0].name.toUpperCase() === type.toUpperCase());\n      setCompanyData(filteredData);\n    } else {\n      setCompanyData(DATA);\n    }\n  };\n\n  const [showSlideSideMenu, setShowSlideSideMenu] = useState(false);\n  const [isShowMenu, setIsShowMenu] = useState(false);\n\n  const hideSideMenu = () => {\n    setShowSlideSideMenu(false);\n    document.body.style.overflow = \"visible\";\n    setIsShowMenu(false);\n  };\n\n  const showSideMenu = () => {\n    setShowSlideSideMenu(true);\n    document.body.style.overflow = \"hidden\";\n    setIsShowMenu(true);\n  };\n\n  return React.createElement(\"div\", {\n    onClick: e => {\n      if (e.target.className !== \"SlideSideMenu\" && showSlideSideMenu) {\n        hideSideMenu();\n      }\n    },\n    style: isShowMenu ? {\n      animation: \"toLeft 0.3s ease\",\n      position: \"relative\",\n      right: \"200px\"\n    } : {\n      animation: \"toRight 0.3s ease\",\n      position: \"relative\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Header, {\n    logo: true,\n    burger: true,\n    toSlideFixedHeader: isShowMenu,\n    showSlideSideMenu: showSlideSideMenu,\n    showSideMenu: showSideMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"homeContentWrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"navContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(CompanyNav, {\n    currentPage: \"/home\",\n    toSlideFixedNav: isShowMenu,\n    clickedType: type => {\n      clickedType(type);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(TypeNav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"homeContent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, !!companyData.length && companyData.map((el, i) => React.createElement(SmallCompanyBlock, {\n    item: el,\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), !companyData.length && isLoading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), !companyData.length && !isLoading && React.createElement(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"\\u0417\\u0430\\u0432\\u0435\\u0434\\u0435\\u043D\\u0438\\u0439 \\u0441 \\u0434\\u0430\\u043D\\u043D\\u044B\\u043C \\u0442\\u0438\\u043F\\u043E \\u043D\\u0435\\u0442\"))), React.createElement(BottomMenu, {\n    toSlideFixedBottomMenu: isShowMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(SlideSideMenu, {\n    isShowMenu: isShowMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }));\n};\n\nexport default Home; // =================================================\n// const [isLogin, setIsLogin] = useState(false);\n// const requestBody = {\n//   query: `\n//     mutation {\n//       login (input: {\n//           username: \"admin@example.com\",\n//           password: \"password\"\n//       }) {\n//         access_token\n//         refresh_token\n//         expires_in\n//         token_type\n//         user {\n//           id\n//           name\n//           email\n//         }\n//       }\n//   }`\n// };\n// useEffect(() => {\n//   if (myContext.token) {\n//     fetch(\"http://194.87.95.37/graphql\", {\n//       method: \"POST\",\n//       body: JSON.stringify(requestBodyCreateNew),\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         Authorization: \"Bearer \" + myContext.token\n//       }\n//     })\n//       .then(res => {\n//         if (res.status !== 200 && res.status !== 201) {\n//           throw new Error(\"Failed!!!\");\n//         }\n//         return res.json();\n//       })\n//       .then(data => {\n//         console.log(data, \" DATA ------2\");\n//       })\n//       .catch(err => {\n//         console.log(err, \"------------- ERRRRRRR\");\n//       });\n//   } else {\n//     console.log(\"ТОКЕНА НЕТ!!!!\");\n//   }\n// }, []);\n// ЭТО СОРТИРОВКА\n// const getSecondsTime = (year, month, day, hours, minutes) => {\n//   return Number(new Date(year, month, day, hours, minutes).getTime());\n// };\n// const current_time = new Date().getTime();\n// const year = new Date().getFullYear(),\n//   month = new Date().getMonth(),\n//   day = new Date().getDate();\n// const quickWorkTimeSort = object => {\n//   if (object.length <= 1) {\n//     return object;\n//   } else {\n//     const left = [],\n//       right = [];\n//     object.forEach((el, i) => {\n//       const startTime =\n//         +el.work_time[0].split(\":\")[0] * 3600 +\n//         +el.work_time[0].split(\":\")[1] * 60;\n//       let endTime =\n//         +el.work_time[1].split(\":\")[0] * 3600 +\n//         +el.work_time[1].split(\":\")[1] * 60;\n//       // ПОШЕЛ СЛЕДУЮЩИЙ ДЕНЬ (найти подругому)\n//       if (startTime > endTime) {\n//         //ПОЛУЧЕНИЕ СЛЕДУЮЩЕГО ДНЯ В СЕКУНДАХ\n//         const dayNow = new Date(year, month, day);\n//         const nextDay = new Date(dayNow);\n//         nextDay.setDate(dayNow.getDate() + 1);\n//         const fullEndTomorrowTime = nextDay.getTime() + endTime; // ВРЕМЯ КОНЦА РАБОТЫ ЗАВТРАШНИМ ДНЕМ\n//         if (\n//           getSecondsTime(\n//             year,\n//             month,\n//             day,\n//             +el.work_time[0].split(\":\")[0],\n//             +el.work_time[0].split(\":\")[1]\n//           ) <= Number(current_time) &&\n//           Number(fullEndTomorrowTime) > Number(current_time)\n//         ) {\n//           left.push(el);\n//         } else {\n//           right.push(el);\n//         }\n//       } else {\n//         // ВСЕ ПРОИСХОДИТ В ОДИН ДЕНЬ\n//         if (\n//           getSecondsTime(\n//             year,\n//             month,\n//             day,\n//             +el.work_time[0].split(\":\")[0],\n//             +el.work_time[0].split(\":\")[1]\n//           ) <= Number(current_time) &&\n//           getSecondsTime(\n//             year,\n//             month,\n//             day,\n//             +el.work_time[1].split(\":\")[0],\n//             +el.work_time[1].split(\":\")[1]\n//           ) > Number(current_time)\n//         ) {\n//           left.push(el);\n//         } else {\n//           right.push(el);\n//         }\n//       }\n//     });\n//     return [...left, ...right];\n//   }\n// };\n// const quickStreemTimeSort = object => {\n//   if (object.length <= 1) {\n//     return object;\n//   } else {\n//     const left = [],\n//       right = [];\n//     object.forEach((el, i) => {\n//       const startTime =\n//         +el.streem_time[0].split(\":\")[0] * 3600 +\n//         +el.streem_time[0].split(\":\")[1] * 60;\n//       let endTime =\n//         +el.streem_time[1].split(\":\")[0] * 3600 +\n//         +el.streem_time[1].split(\":\")[1] * 60;\n//       // ПОШЕЛ СЛЕДУЮЩИЙ ДЕНЬ (найти подругому)\n//       if (startTime > endTime) {\n//         //ПОЛУЧЕНИЕ СЛЕДУЮЩЕГО ДНЯ В СЕКУНДАХ\n//         const dayNow = new Date(year, month, day);\n//         const nextDay = new Date(dayNow);\n//         nextDay.setDate(dayNow.getDate() + 1);\n//         const fullEndTomorrowTime = nextDay.getTime() + endTime; // ВРЕМЯ КОНЦА РАБОТЫ ЗАВТРАШНИМ ДНЕМ\n//         if (\n//           getSecondsTime(\n//             year,\n//             month,\n//             day,\n//             +el.streem_time[0].split(\":\")[0],\n//             +el.streem_time[0].split(\":\")[1]\n//           ) <= Number(current_time) &&\n//           Number(fullEndTomorrowTime) > Number(current_time)\n//         ) {\n//           left.push(el);\n//         } else {\n//           right.push(el);\n//         }\n//       } else {\n//         // ВСЕ ПРОИСХОДИТ В ОДИН ДЕНЬ\n//         if (\n//           getSecondsTime(\n//             year,\n//             month,\n//             day,\n//             +el.streem_time[0].split(\":\")[0],\n//             +el.streem_time[0].split(\":\")[1]\n//           ) <= Number(current_time) &&\n//           getSecondsTime(\n//             year,\n//             month,\n//             day,\n//             +el.streem_time[1].split(\":\")[0],\n//             +el.streem_time[1].split(\":\")[1]\n//           ) > Number(current_time)\n//         ) {\n//           left.push(el);\n//         } else {\n//           right.push(el);\n//         }\n//       }\n//     });\n//     return [...left, ...right];\n//   }\n// };","map":{"version":3,"sources":["D:/GitHub/party_live_web/src/pages/home/Home.js"],"names":["React","useState","useEffect","useContext","CompanyNav","TypeNav","SmallCompanyBlock","SlideSideMenu","BottomMenu","Header","Loader","QUERY","Home","props","DATA","setDATA","companyData","setCompanyData","isLoading","setIsLoading","query","then","res","json","data","places","catch","err","console","log","clickedType","type","filteredData","filter","el","categories","name","toUpperCase","showSlideSideMenu","setShowSlideSideMenu","isShowMenu","setIsShowMenu","hideSideMenu","document","body","style","overflow","showSideMenu","e","target","className","animation","position","right","length","map","i","padding"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,OAAO,YAAP;AAEA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAAC;AACJS,MAAAA,KAAK,EAAG;;;;;;;;;;AADJ,KAAD,CAAL,CAYGC,IAZH,CAYQC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAdH,EAeGF,IAfH,CAeQG,IAAI,IAAI;AACZL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,cAAc,CAACO,IAAI,CAACA,IAAL,CAAUC,MAAX,CAAd;AACAV,MAAAA,OAAO,CAACS,IAAI,CAACA,IAAL,CAAUC,MAAX,CAAP;AACD,KAnBH,EAoBGC,KApBH,CAoBSC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,OAAjB;AACD,KAtBH;AAuBD,GAxBQ,EAwBN,EAxBM,CAAT;;AA0BA,QAAMG,WAAW,GAAGC,IAAI,IAAI;AAC1B,QAAIA,IAAJ,EAAU;AACR,YAAMC,YAAY,GAAGlB,IAAI,CAACmB,MAAL,CACnBC,EAAE,IAAIA,EAAE,CAACC,UAAH,CAAc,CAAd,EAAiBC,IAAjB,CAAsBC,WAAtB,OAAwCN,IAAI,CAACM,WAAL,EAD3B,CAArB;AAGApB,MAAAA,cAAc,CAACe,YAAD,CAAd;AACD,KALD,MAKO;AACLf,MAAAA,cAAc,CAACH,IAAD,CAAd;AACD;AACF,GATD;;AAWA,QAAM,CAACwB,iBAAD,EAAoBC,oBAApB,IAA4CtC,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACuC,UAAD,EAAaC,aAAb,IAA8BxC,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMyC,YAAY,GAAG,MAAM;AACzBH,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACAI,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,SAA/B;AACAL,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAJD;;AAMA,QAAMM,YAAY,GAAG,MAAM;AACzBR,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAI,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,QAA/B;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAJD;;AAMA,SACE;AACE,IAAA,OAAO,EAAEO,CAAC,IAAI;AACZ,UAAIA,CAAC,CAACC,MAAF,CAASC,SAAT,KAAuB,eAAvB,IAA0CZ,iBAA9C,EAAiE;AAC/DI,QAAAA,YAAY;AACb;AACF,KALH;AAME,IAAA,KAAK,EACHF,UAAU,GACN;AACEW,MAAAA,SAAS,EAAE,kBADb;AAEEC,MAAAA,QAAQ,EAAE,UAFZ;AAGEC,MAAAA,KAAK,EAAE;AAHT,KADM,GAMN;AACEF,MAAAA,SAAS,EAAE,mBADb;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,MAAM,MAFR;AAGE,IAAA,kBAAkB,EAAEZ,UAHtB;AAIE,IAAA,iBAAiB,EAAEF,iBAJrB;AAKE,IAAA,YAAY,EAAES,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,WAAW,EAAC,OADd;AAEE,IAAA,eAAe,EAAEP,UAFnB;AAGE,IAAA,WAAW,EAAET,IAAI,IAAI;AACnBD,MAAAA,WAAW,CAACC,IAAD,CAAX;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,EAWE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,CAACf,WAAW,CAACsC,MAAd,IACCtC,WAAW,CAACuC,GAAZ,CAAgB,CAACrB,EAAD,EAAKsB,CAAL,KACd,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAEtB,EAAzB;AAA6B,IAAA,GAAG,EAAEsB,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,EAKG,CAACxC,WAAW,CAACsC,MAAb,IAAuBpC,SAAvB,IAAoC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALvC,EAMG,CAACF,WAAW,CAACsC,MAAb,IAAuB,CAACpC,SAAxB,IACC;AACE,IAAA,KAAK,EAAE;AACLuC,MAAAA,OAAO,EAAE;AADJ,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sJAPJ,CAXF,CARF,EAqCE,oBAAC,UAAD;AAAY,IAAA,sBAAsB,EAAEjB,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,CAnBF,EA0DE,oBAAC,aAAD;AAAe,IAAA,UAAU,EAAEA,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1DF,CADF;AA8DD,CAxHD;;AA0HA,eAAe5B,IAAfsourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport CompanyNav from \"../../components/companyNav/CompanyNav\";\r\nimport TypeNav from \"../../components/typeNav/TypeNav\";\r\nimport SmallCompanyBlock from \"../../components/smallCompanyBlock/SmallCompanyBlock\";\r\nimport SlideSideMenu from \"../../components/slideSideMenu/SlideSideMenu\";\r\nimport BottomMenu from \"../../components/bottomMenu/BottomMenu\";\r\nimport Header from \"../../components/header/Header\";\r\nimport Loader from \"../../components/loader/Loader\";\r\n\r\nimport \"./home.css\";\r\n\r\nimport QUERY from \"../../query\";\r\n\r\nconst Home = props => {\r\n  const [DATA, setDATA] = useState([]);\r\n  const [companyData, setCompanyData] = useState([]);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    QUERY({\r\n      query: `query {\r\n        places {\r\n          id name address description logo menu actions coordinates\r\n          streams{url name id preview\r\n            schedules{id day start_time end_time}\r\n          }\r\n          schedules {id day start_time end_time}\r\n          categories {id name}\r\n        }\r\n      }`\r\n    })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setIsLoading(false);\r\n        setCompanyData(data.data.places);\r\n        setDATA(data.data.places);\r\n      })\r\n      .catch(err => {\r\n        console.log(err, \"  ERR\");\r\n      });\r\n  }, []);\r\n\r\n  const clickedType = type => {\r\n    if (type) {\r\n      const filteredData = DATA.filter(\r\n        el => el.categories[0].name.toUpperCase() === type.toUpperCase()\r\n      );\r\n      setCompanyData(filteredData);\r\n    } else {\r\n      setCompanyData(DATA);\r\n    }\r\n  };\r\n\r\n  const [showSlideSideMenu, setShowSlideSideMenu] = useState(false);\r\n  const [isShowMenu, setIsShowMenu] = useState(false);\r\n\r\n  const hideSideMenu = () => {\r\n    setShowSlideSideMenu(false);\r\n    document.body.style.overflow = \"visible\";\r\n    setIsShowMenu(false);\r\n  };\r\n\r\n  const showSideMenu = () => {\r\n    setShowSlideSideMenu(true);\r\n    document.body.style.overflow = \"hidden\";\r\n    setIsShowMenu(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={e => {\r\n        if (e.target.className !== \"SlideSideMenu\" && showSlideSideMenu) {\r\n          hideSideMenu();\r\n        }\r\n      }}\r\n      style={\r\n        isShowMenu\r\n          ? {\r\n              animation: \"toLeft 0.3s ease\",\r\n              position: \"relative\",\r\n              right: \"200px\"\r\n            }\r\n          : {\r\n              animation: \"toRight 0.3s ease\",\r\n              position: \"relative\"\r\n            }\r\n      }\r\n    >\r\n      <div>\r\n        <Header\r\n          logo\r\n          burger\r\n          toSlideFixedHeader={isShowMenu}\r\n          showSlideSideMenu={showSlideSideMenu}\r\n          showSideMenu={showSideMenu}\r\n        />\r\n        <div className=\"homeContentWrap\">\r\n          <div className=\"navContainer\">\r\n            <CompanyNav\r\n              currentPage=\"/home\"\r\n              toSlideFixedNav={isShowMenu}\r\n              clickedType={type => {\r\n                clickedType(type);\r\n              }}\r\n            />\r\n            <TypeNav />\r\n          </div>\r\n          <div className=\"homeContent\">\r\n            {!!companyData.length &&\r\n              companyData.map((el, i) => (\r\n                <SmallCompanyBlock item={el} key={i} />\r\n              ))}\r\n            {!companyData.length && isLoading && <Loader />}\r\n            {!companyData.length && !isLoading && (\r\n              <div\r\n                style={{\r\n                  padding: \"20px\"\r\n                }}\r\n              >\r\n                Заведений с данным типо нет\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <BottomMenu toSlideFixedBottomMenu={isShowMenu} />\r\n      </div>\r\n      <SlideSideMenu isShowMenu={isShowMenu} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n// =================================================\r\n// const [isLogin, setIsLogin] = useState(false);\r\n\r\n// const requestBody = {\r\n//   query: `\r\n//     mutation {\r\n//       login (input: {\r\n//           username: \"admin@example.com\",\r\n//           password: \"password\"\r\n//       }) {\r\n//         access_token\r\n//         refresh_token\r\n//         expires_in\r\n//         token_type\r\n//         user {\r\n//           id\r\n//           name\r\n//           email\r\n//         }\r\n//       }\r\n//   }`\r\n// };\r\n// useEffect(() => {\r\n//   if (myContext.token) {\r\n//     fetch(\"http://194.87.95.37/graphql\", {\r\n//       method: \"POST\",\r\n//       body: JSON.stringify(requestBodyCreateNew),\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: \"Bearer \" + myContext.token\r\n//       }\r\n//     })\r\n//       .then(res => {\r\n//         if (res.status !== 200 && res.status !== 201) {\r\n//           throw new Error(\"Failed!!!\");\r\n//         }\r\n//         return res.json();\r\n//       })\r\n//       .then(data => {\r\n//         console.log(data, \" DATA ------2\");\r\n//       })\r\n//       .catch(err => {\r\n//         console.log(err, \"------------- ERRRRRRR\");\r\n//       });\r\n//   } else {\r\n//     console.log(\"ТОКЕНА НЕТ!!!!\");\r\n//   }\r\n// }, []);\r\n\r\n// ЭТО СОРТИРОВКА\r\n// const getSecondsTime = (year, month, day, hours, minutes) => {\r\n//   return Number(new Date(year, month, day, hours, minutes).getTime());\r\n// };\r\n\r\n// const current_time = new Date().getTime();\r\n// const year = new Date().getFullYear(),\r\n//   month = new Date().getMonth(),\r\n//   day = new Date().getDate();\r\n\r\n// const quickWorkTimeSort = object => {\r\n//   if (object.length <= 1) {\r\n//     return object;\r\n//   } else {\r\n//     const left = [],\r\n//       right = [];\r\n\r\n//     object.forEach((el, i) => {\r\n//       const startTime =\r\n//         +el.work_time[0].split(\":\")[0] * 3600 +\r\n//         +el.work_time[0].split(\":\")[1] * 60;\r\n//       let endTime =\r\n//         +el.work_time[1].split(\":\")[0] * 3600 +\r\n//         +el.work_time[1].split(\":\")[1] * 60;\r\n\r\n//       // ПОШЕЛ СЛЕДУЮЩИЙ ДЕНЬ (найти подругому)\r\n//       if (startTime > endTime) {\r\n//         //ПОЛУЧЕНИЕ СЛЕДУЮЩЕГО ДНЯ В СЕКУНДАХ\r\n//         const dayNow = new Date(year, month, day);\r\n//         const nextDay = new Date(dayNow);\r\n//         nextDay.setDate(dayNow.getDate() + 1);\r\n//         const fullEndTomorrowTime = nextDay.getTime() + endTime; // ВРЕМЯ КОНЦА РАБОТЫ ЗАВТРАШНИМ ДНЕМ\r\n\r\n//         if (\r\n//           getSecondsTime(\r\n//             year,\r\n//             month,\r\n//             day,\r\n//             +el.work_time[0].split(\":\")[0],\r\n//             +el.work_time[0].split(\":\")[1]\r\n//           ) <= Number(current_time) &&\r\n//           Number(fullEndTomorrowTime) > Number(current_time)\r\n//         ) {\r\n//           left.push(el);\r\n//         } else {\r\n//           right.push(el);\r\n//         }\r\n//       } else {\r\n//         // ВСЕ ПРОИСХОДИТ В ОДИН ДЕНЬ\r\n//         if (\r\n//           getSecondsTime(\r\n//             year,\r\n//             month,\r\n//             day,\r\n//             +el.work_time[0].split(\":\")[0],\r\n//             +el.work_time[0].split(\":\")[1]\r\n//           ) <= Number(current_time) &&\r\n//           getSecondsTime(\r\n//             year,\r\n//             month,\r\n//             day,\r\n//             +el.work_time[1].split(\":\")[0],\r\n//             +el.work_time[1].split(\":\")[1]\r\n//           ) > Number(current_time)\r\n//         ) {\r\n//           left.push(el);\r\n//         } else {\r\n//           right.push(el);\r\n//         }\r\n//       }\r\n//     });\r\n//     return [...left, ...right];\r\n//   }\r\n// };\r\n\r\n// const quickStreemTimeSort = object => {\r\n//   if (object.length <= 1) {\r\n//     return object;\r\n//   } else {\r\n//     const left = [],\r\n//       right = [];\r\n\r\n//     object.forEach((el, i) => {\r\n//       const startTime =\r\n//         +el.streem_time[0].split(\":\")[0] * 3600 +\r\n//         +el.streem_time[0].split(\":\")[1] * 60;\r\n//       let endTime =\r\n//         +el.streem_time[1].split(\":\")[0] * 3600 +\r\n//         +el.streem_time[1].split(\":\")[1] * 60;\r\n\r\n//       // ПОШЕЛ СЛЕДУЮЩИЙ ДЕНЬ (найти подругому)\r\n//       if (startTime > endTime) {\r\n//         //ПОЛУЧЕНИЕ СЛЕДУЮЩЕГО ДНЯ В СЕКУНДАХ\r\n//         const dayNow = new Date(year, month, day);\r\n//         const nextDay = new Date(dayNow);\r\n//         nextDay.setDate(dayNow.getDate() + 1);\r\n//         const fullEndTomorrowTime = nextDay.getTime() + endTime; // ВРЕМЯ КОНЦА РАБОТЫ ЗАВТРАШНИМ ДНЕМ\r\n\r\n//         if (\r\n//           getSecondsTime(\r\n//             year,\r\n//             month,\r\n//             day,\r\n//             +el.streem_time[0].split(\":\")[0],\r\n//             +el.streem_time[0].split(\":\")[1]\r\n//           ) <= Number(current_time) &&\r\n//           Number(fullEndTomorrowTime) > Number(current_time)\r\n//         ) {\r\n//           left.push(el);\r\n//         } else {\r\n//           right.push(el);\r\n//         }\r\n//       } else {\r\n//         // ВСЕ ПРОИСХОДИТ В ОДИН ДЕНЬ\r\n//         if (\r\n//           getSecondsTime(\r\n//             year,\r\n//             month,\r\n//             day,\r\n//             +el.streem_time[0].split(\":\")[0],\r\n//             +el.streem_time[0].split(\":\")[1]\r\n//           ) <= Number(current_time) &&\r\n//           getSecondsTime(\r\n//             year,\r\n//             month,\r\n//             day,\r\n//             +el.streem_time[1].split(\":\")[0],\r\n//             +el.streem_time[1].split(\":\")[1]\r\n//           ) > Number(current_time)\r\n//         ) {\r\n//           left.push(el);\r\n//         } else {\r\n//           right.push(el);\r\n//         }\r\n//       }\r\n//     });\r\n//     return [...left, ...right];\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}