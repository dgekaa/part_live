{"ast":null,"code":"/* eslint-disable max-params */\n'use strict';\n\nvar qs = require('querystring');\n\nvar extend = require('xtend');\n\nvar load = require('little-loader');\n\nvar API_VERSION = 3;\n/**\n * Declare internal resolve function, pass google.maps for the Promise resolve\n *\n * @param  {Function} resolve\n */\n\nfunction internalResolve(resolve) {\n  resolve(window.google && window.google.maps ? window.google.maps : false);\n}\n/**\n * @param  {Object} options\n * @param  {String} options.apiKey\n * @param  {String} options.language\n * @param  {String[]} options.libraries\n *\n * @return {Promise}\n */\n\n\nmodule.exports = function (options) {\n  options = options || {};\n  return new Promise(function (resolve, reject) {\n    // Global callback name\n    var callbackName = '__fetchGoogleMaps_' + String(Date.now());\n    var version = options.version || API_VERSION; // Default Parameters\n\n    var params = {\n      key: options.apiKey,\n      language: options.language || 'en',\n      libraries: (options.libraries || []).join(',')\n    };\n\n    if (typeof options.apiKey === 'undefined') {\n      throw new Error('Google Maps API key is not provided.');\n    } // If google.maps exists, then Google Maps API was probably loaded with the <script> tag\n\n\n    if (window.google && window.google.maps) {\n      internalResolve(resolve); // If the google.load method exists, lets load the Google Maps API in Async.\n    } else if (window.google && window.google.load) {\n      window.google.load('maps', version, {\n        'other_params': qs.stringify(params),\n        callback: function () {\n          internalResolve(resolve);\n        }\n      }); // Last, try pure script loading technique to load the Google Maps API in async.\n    } else {\n      // URL params\n      params = extend({\n        v: version\n      }, params, {\n        callback: callbackName\n      }); // Declare the global callback\n\n      window[callbackName] = function () {\n        internalResolve(resolve); // Delete callback\n\n        setTimeout(function () {\n          try {\n            delete window[callbackName];\n          } catch (e) {\n            window[callbackName] = null;\n          }\n        }, 20);\n      };\n\n      load('//maps.googleapis.com/maps/api/js?' + String(qs.stringify(params)), function (err) {\n        if (err) {\n          reject(err);\n          return;\n        }\n      });\n    }\n  });\n};","map":{"version":3,"sources":["D:/GitHub/party_live_web/node_modules/fetch-google-maps/dist/index.js"],"names":["qs","require","extend","load","API_VERSION","internalResolve","resolve","window","google","maps","module","exports","options","Promise","reject","callbackName","String","Date","now","version","params","key","apiKey","language","libraries","join","Error","stringify","callback","v","setTimeout","e","err"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAhB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,OAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIG,WAAW,GAAG,CAAlB;AAEA;;;;;;AAKA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACjCA,EAAAA,OAAO,CAACC,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,IAA/B,GAAsCF,MAAM,CAACC,MAAP,CAAcC,IAApD,GAA2D,KAA5D,CAAP;AACA;AAED;;;;;;;;;;AAQAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAEnCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAAUP,OAAV,EAAmBQ,MAAnB,EAA2B;AAE7C;AACA,QAAIC,YAAY,GAAG,uBAAuBC,MAAM,CAACC,IAAI,CAACC,GAAL,EAAD,CAAhD;AACA,QAAIC,OAAO,GAAGP,OAAO,CAACO,OAAR,IAAmBf,WAAjC,CAJ6C,CAM7C;;AACA,QAAIgB,MAAM,GAAG;AACZC,MAAAA,GAAG,EAAET,OAAO,CAACU,MADD;AAEZC,MAAAA,QAAQ,EAAEX,OAAO,CAACW,QAAR,IAAoB,IAFlB;AAGZC,MAAAA,SAAS,EAAE,CAACZ,OAAO,CAACY,SAAR,IAAqB,EAAtB,EAA0BC,IAA1B,CAA+B,GAA/B;AAHC,KAAb;;AAMA,QAAI,OAAOb,OAAO,CAACU,MAAf,KAA0B,WAA9B,EAA2C;AAC1C,YAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;AACA,KAf4C,CAiB7C;;;AACA,QAAInB,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcC,IAAnC,EAAyC;AAExCJ,MAAAA,eAAe,CAACC,OAAD,CAAf,CAFwC,CAIxC;AACA,KALD,MAKO,IAAIC,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACC,MAAP,CAAcL,IAAnC,EAAyC;AAE/CI,MAAAA,MAAM,CAACC,MAAP,CAAcL,IAAd,CAAmB,MAAnB,EAA2BgB,OAA3B,EAAoC;AACnC,wBAAgBnB,EAAE,CAAC2B,SAAH,CAAaP,MAAb,CADmB;AAEnCQ,QAAAA,QAAQ,EAAE,YAAY;AACrBvB,UAAAA,eAAe,CAACC,OAAD,CAAf;AACA;AAJkC,OAApC,EAF+C,CAS/C;AACA,KAVM,MAUA;AAEN;AACAc,MAAAA,MAAM,GAAGlB,MAAM,CAAC;AACf2B,QAAAA,CAAC,EAAEV;AADY,OAAD,EAEZC,MAFY,EAEJ;AACVQ,QAAAA,QAAQ,EAAEb;AADA,OAFI,CAAf,CAHM,CASN;;AACAR,MAAAA,MAAM,CAACQ,YAAD,CAAN,GAAuB,YAAY;AAClCV,QAAAA,eAAe,CAACC,OAAD,CAAf,CADkC,CAGlC;;AACAwB,QAAAA,UAAU,CAAC,YAAY;AACtB,cAAI;AACH,mBAAOvB,MAAM,CAACQ,YAAD,CAAb;AACA,WAFD,CAEE,OAAOgB,CAAP,EAAU;AACXxB,YAAAA,MAAM,CAACQ,YAAD,CAAN,GAAuB,IAAvB;AACA;AACD,SANS,EAMP,EANO,CAAV;AAOA,OAXD;;AAaAZ,MAAAA,IAAI,CAAC,uCAAuCa,MAAM,CAAChB,EAAE,CAAC2B,SAAH,CAAaP,MAAb,CAAD,CAA9C,EAAsE,UAAUY,GAAV,EAAe;AACxF,YAAIA,GAAJ,EAAS;AACRlB,UAAAA,MAAM,CAACkB,GAAD,CAAN;AACA;AACA;AACD,OALG,CAAJ;AAMA;AACD,GA/DM,CAAP;AAgEA,CApED","sourcesContent":["/* eslint-disable max-params */\n\n'use strict';\n\nvar qs = require('querystring');\nvar extend = require('xtend');\nvar load = require('little-loader');\nvar API_VERSION = 3;\n\n/**\n * Declare internal resolve function, pass google.maps for the Promise resolve\n *\n * @param  {Function} resolve\n */\nfunction internalResolve(resolve) {\n\tresolve(window.google && window.google.maps ? window.google.maps : false);\n}\n\n/**\n * @param  {Object} options\n * @param  {String} options.apiKey\n * @param  {String} options.language\n * @param  {String[]} options.libraries\n *\n * @return {Promise}\n */\nmodule.exports = function (options) {\n\n\toptions = options || {};\n\n\treturn new Promise(function (resolve, reject) {\n\n\t\t// Global callback name\n\t\tvar callbackName = '__fetchGoogleMaps_' + String(Date.now());\n\t\tvar version = options.version || API_VERSION;\n\n\t\t// Default Parameters\n\t\tvar params = {\n\t\t\tkey: options.apiKey,\n\t\t\tlanguage: options.language || 'en',\n\t\t\tlibraries: (options.libraries || []).join(',')\n\t\t};\n\n\t\tif (typeof options.apiKey === 'undefined') {\n\t\t\tthrow new Error('Google Maps API key is not provided.');\n\t\t}\n\n\t\t// If google.maps exists, then Google Maps API was probably loaded with the <script> tag\n\t\tif (window.google && window.google.maps) {\n\n\t\t\tinternalResolve(resolve);\n\n\t\t\t// If the google.load method exists, lets load the Google Maps API in Async.\n\t\t} else if (window.google && window.google.load) {\n\n\t\t\twindow.google.load('maps', version, {\n\t\t\t\t'other_params': qs.stringify(params),\n\t\t\t\tcallback: function () {\n\t\t\t\t\tinternalResolve(resolve);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Last, try pure script loading technique to load the Google Maps API in async.\n\t\t} else {\n\n\t\t\t// URL params\n\t\t\tparams = extend({\n\t\t\t\tv: version\n\t\t\t}, params, {\n\t\t\t\tcallback: callbackName\n\t\t\t});\n\n\t\t\t// Declare the global callback\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tinternalResolve(resolve);\n\n\t\t\t\t// Delete callback\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdelete window[callbackName];\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\twindow[callbackName] = null;\n\t\t\t\t\t}\n\t\t\t\t}, 20);\n\t\t\t};\n\n\t\t\tload('//maps.googleapis.com/maps/api/js?' + String(qs.stringify(params)), function (err) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};"]},"metadata":{},"sourceType":"script"}