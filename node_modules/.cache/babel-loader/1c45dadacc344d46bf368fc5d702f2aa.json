{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\party_live_web\\\\src\\\\pages\\\\map\\\\Map.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport GooggleMapReact from \"google-map-react\";\nimport useSupercluster from \"use-supercluster\";\nimport { Link } from \"react-router-dom\";\nimport BottomMenu from \"../../components/bottomMenu/BottomMenu\";\nimport Header from \"../../components/header/Header\";\nimport QUERY from \"../../query\";\nimport { isShowStreamNow, isWorkTimeNow } from \"../../calculateTime\";\nimport { API_KEY } from \"../../constants\";\nimport \"./map.css\";\nimport TypeNav from \"../../components/typeNav/TypeNav\";\nimport CompanyNav from \"../../components/companyNav/CompanyNav\";\nimport SlideSideMenu from \"../../components/slideSideMenu/SlideSideMenu\";\nimport Loader from \"../../components/loader/Loader\";\n\nconst Marker = ({\n  children\n}) => children;\n\nconst MapComponent = props => {\n  const [DATA, setDATA] = useState([]);\n  const [markers, setMarkers] = useState([]);\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(11);\n  const [bounds, setBounds] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    QUERY({\n      query: `query{\n        places{id name coordinates\n          streams{url name id preview\n            schedules{id day start_time end_time}\n          }\n          schedules{id day start_time end_time}\n          categories{id name slug}}\n        }`\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setIsLoading(false);\n      setMarkers(data.data.places);\n      setDATA(data.data.places);\n    }).catch(err => {\n      console.log(err, \"  ERR\");\n    });\n  }, []);\n  const points = markers.map((el, i) => {\n    return {\n      type: \"Feature\",\n      item: el,\n      properties: {\n        cluster: false,\n        crimeId: i,\n        category: el.categories[0].name\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [+el.coordinates.split(\",\")[1], +el.coordinates.split(\",\")[0]]\n      }\n    };\n  });\n  const {\n    clusters\n  } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 170,\n      maxZoom: 20\n    }\n  });\n\n  const clickedType = type => {\n    if (type) {\n      const filteredData = DATA.filter(el => el.categories[0].name.toUpperCase() === type.toUpperCase());\n      setMarkers(filteredData);\n    } else {\n      setMarkers(DATA);\n    }\n  };\n\n  const [showSlideSideMenu, setShowSlideSideMenu] = useState(false);\n  const [isShowMenu, setIsShowMenu] = useState(false);\n\n  const hideSideMenu = () => {\n    setShowSlideSideMenu(false);\n    setTimeout(() => {\n      document.body.style.overflow = \"visible\";\n    }, 400);\n    setIsShowMenu(false);\n  };\n\n  const showSideMenu = () => {\n    setShowSlideSideMenu(true);\n    document.body.style.overflow = \"hidden\";\n    setIsShowMenu(true);\n  };\n\n  window.onresize = function (e) {\n    hideSideMenu();\n  };\n\n  const [defaultCenter, setDefaultCenter] = useState();\n\n  if (navigator.geolocation && !defaultCenter) {\n    navigator.geolocation.getCurrentPosition(pos => {\n      console.log(pos.coords, \"GEO POS____\");\n      setDefaultCenter({\n        lat: pos.coords.latitude,\n        lng: pos.coords.longitude\n      });\n    }, err => {\n      console.log(err, \" GEOLOCATION ERROR\");\n    });\n  } else {\n    console.log(\"Геолокация недоступна\");\n  }\n\n  return React.createElement(\"div\", {\n    onClick: e => {\n      if (e.target.className !== \"SlideSideMenu\" && showSlideSideMenu) {\n        hideSideMenu();\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Header, {\n    logo: true,\n    arrow: true,\n    burger: true,\n    toSlideFixedHeader: isShowMenu,\n    showSlideSideMenu: showSlideSideMenu,\n    showSideMenu: showSideMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"navContainerMap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(CompanyNav, {\n    style: {\n      zIndex: 1\n    },\n    currentPage: \"/map\",\n    clickedType: clickedType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), React.createElement(TypeNav, {\n    style: {\n      zIndex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })), isLoading && React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), !isLoading && React.createElement(\"div\", {\n    className: \"mapContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(GooggleMapReact, {\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    bootstrapURLKeys: {\n      key: API_KEY\n    },\n    defaultCenter: defaultCenter || {\n      lat: 53.904577,\n      lng: 27.557328\n    },\n    defaultZoom: 8,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map\n    }) => {\n      mapRef.current = map;\n    },\n    onChange: ({\n      zoom,\n      bounds\n    }) => {\n      setZoom(zoom);\n      setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, defaultCenter && React.createElement(Marker, {\n    lat: defaultCenter.lat,\n    lng: defaultCenter.lng,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    alt: \"me\",\n    style: {\n      height: \"32px\",\n      width: \"32px\"\n    },\n    src: `${process.env.PUBLIC_URL}/img/dancer.png`,\n    className: \"eye\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  })), clusters.map(cluster => {\n    const [longitude, latitude] = cluster.geometry.coordinates;\n    const {\n      cluster: isCluster,\n      point_count: pointCount\n    } = cluster.properties; //ЗАМЕНА НА ЦИФРЫ\n\n    if (isCluster) {\n      return React.createElement(Marker, {\n        key: cluster.properties.cluster_id,\n        lat: latitude,\n        lng: longitude,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"clusterMarker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \" \", pointCount)));\n    } //БЕЗ ЗАМЕНЫ НА ЦИФРЫ\n\n\n    console.log(cluster.item, \" ITEM\");\n    let streamTime = \"\",\n        workTime = \"\",\n        isWork = false;\n\n    const setShowStream = time => {\n      streamTime = time;\n    };\n\n    const setWorkTime = time => {\n      workTime = time;\n    };\n\n    const setIsWork = bool => {\n      isWork = bool;\n    };\n\n    isShowStreamNow(cluster.item, setShowStream);\n    isWorkTimeNow(cluster.item, setWorkTime, setIsWork);\n    return React.createElement(Marker, {\n      key: cluster.properties.crimeId,\n      lat: latitude,\n      lng: longitude,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: {\n        pathname: `/company/${cluster.item.id}`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mapMarkerWrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mapMarker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, !!streamTime && React.createElement(\"video\", {\n      className: \"companyImg1\",\n      src: cluster.item.streams[0].preview,\n      autoPlay: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), !streamTime && React.createElement(\"div\", {\n      className: \"companyImg1\",\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: \"#fff\",\n        textAlign: \"center\",\n        padding: \"3px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"\\u0422\\u0440\\u0430\\u043D\\u0441\\u043B\\u044F\\u0446\\u0438\\u0438 \\u043D\\u0435\\u0442\"))), React.createElement(\"p\", {\n      className: \"mapMarkerName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, cluster.item.categories[0].name, \" \\\"\", cluster.item.name, \"\\\"\", React.createElement(\"span\", {\n      className: \"openedTo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, isWork && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \" \\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u043E: \\u0434\\u043E \", workTime.split(\"-\")[1]), !isWork && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \" \\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u043E \"))), React.createElement(\"div\", {\n      className: \"arrow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }))));\n  }))), React.createElement(BottomMenu, {\n    toSlideFixedBottomMenu: isShowMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }), React.createElement(SlideSideMenu, {\n    isShowMenu: isShowMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }));\n};\n\nexport default MapComponent;","map":{"version":3,"sources":["D:/GitHub/party_live_web/src/pages/map/Map.js"],"names":["React","useState","useRef","useEffect","GooggleMapReact","useSupercluster","Link","BottomMenu","Header","QUERY","isShowStreamNow","isWorkTimeNow","API_KEY","TypeNav","CompanyNav","SlideSideMenu","Loader","Marker","children","MapComponent","props","DATA","setDATA","markers","setMarkers","mapRef","zoom","setZoom","bounds","setBounds","isLoading","setIsLoading","query","then","res","json","data","places","catch","err","console","log","points","map","el","i","type","item","properties","cluster","crimeId","category","categories","name","geometry","coordinates","split","clusters","options","radius","maxZoom","clickedType","filteredData","filter","toUpperCase","showSlideSideMenu","setShowSlideSideMenu","isShowMenu","setIsShowMenu","hideSideMenu","setTimeout","document","body","style","overflow","showSideMenu","window","onresize","e","defaultCenter","setDefaultCenter","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","target","className","zIndex","height","width","key","current","nw","se","process","env","PUBLIC_URL","isCluster","point_count","pointCount","cluster_id","streamTime","workTime","isWork","setShowStream","time","setWorkTime","setIsWork","bool","pathname","id","streams","preview","display","alignItems","justifyContent","color","textAlign","padding"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport GooggleMapReact from \"google-map-react\";\r\nimport useSupercluster from \"use-supercluster\";\r\nimport { Link } from \"react-router-dom\";\r\nimport BottomMenu from \"../../components/bottomMenu/BottomMenu\";\r\nimport Header from \"../../components/header/Header\";\r\n\r\nimport QUERY from \"../../query\";\r\nimport { isShowStreamNow, isWorkTimeNow } from \"../../calculateTime\";\r\nimport { API_KEY } from \"../../constants\";\r\n\r\nimport \"./map.css\";\r\n\r\nimport TypeNav from \"../../components/typeNav/TypeNav\";\r\nimport CompanyNav from \"../../components/companyNav/CompanyNav\";\r\nimport SlideSideMenu from \"../../components/slideSideMenu/SlideSideMenu\";\r\nimport Loader from \"../../components/loader/Loader\";\r\n\r\nconst Marker = ({ children }) => children;\r\n\r\nconst MapComponent = props => {\r\n  const [DATA, setDATA] = useState([]);\r\n\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  const mapRef = useRef();\r\n  const [zoom, setZoom] = useState(11);\r\n  const [bounds, setBounds] = useState(null);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    QUERY({\r\n      query: `query{\r\n        places{id name coordinates\r\n          streams{url name id preview\r\n            schedules{id day start_time end_time}\r\n          }\r\n          schedules{id day start_time end_time}\r\n          categories{id name slug}}\r\n        }`\r\n    })\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setIsLoading(false);\r\n        setMarkers(data.data.places);\r\n        setDATA(data.data.places);\r\n      })\r\n      .catch(err => {\r\n        console.log(err, \"  ERR\");\r\n      });\r\n  }, []);\r\n\r\n  const points = markers.map((el, i) => {\r\n    return {\r\n      type: \"Feature\",\r\n      item: el,\r\n      properties: {\r\n        cluster: false,\r\n        crimeId: i,\r\n        category: el.categories[0].name\r\n      },\r\n      geometry: {\r\n        type: \"Point\",\r\n        coordinates: [\r\n          +el.coordinates.split(\",\")[1],\r\n          +el.coordinates.split(\",\")[0]\r\n        ]\r\n      }\r\n    };\r\n  });\r\n\r\n  const { clusters } = useSupercluster({\r\n    points,\r\n    bounds,\r\n    zoom,\r\n    options: {\r\n      radius: 170,\r\n      maxZoom: 20\r\n    }\r\n  });\r\n\r\n  const clickedType = type => {\r\n    if (type) {\r\n      const filteredData = DATA.filter(\r\n        el => el.categories[0].name.toUpperCase() === type.toUpperCase()\r\n      );\r\n      setMarkers(filteredData);\r\n    } else {\r\n      setMarkers(DATA);\r\n    }\r\n  };\r\n\r\n  const [showSlideSideMenu, setShowSlideSideMenu] = useState(false);\r\n  const [isShowMenu, setIsShowMenu] = useState(false);\r\n\r\n  const hideSideMenu = () => {\r\n    setShowSlideSideMenu(false);\r\n    setTimeout(() => {\r\n      document.body.style.overflow = \"visible\";\r\n    }, 400);\r\n    setIsShowMenu(false);\r\n  };\r\n\r\n  const showSideMenu = () => {\r\n    setShowSlideSideMenu(true);\r\n    document.body.style.overflow = \"hidden\";\r\n    setIsShowMenu(true);\r\n  };\r\n\r\n  window.onresize = function(e) {\r\n    hideSideMenu();\r\n  };\r\n\r\n  const [defaultCenter, setDefaultCenter] = useState();\r\n\r\n  if (navigator.geolocation && !defaultCenter) {\r\n    navigator.geolocation.getCurrentPosition(\r\n      pos => {\r\n        console.log(pos.coords, \"GEO POS____\");\r\n        setDefaultCenter({\r\n          lat: pos.coords.latitude,\r\n          lng: pos.coords.longitude\r\n        });\r\n      },\r\n      err => {\r\n        console.log(err, \" GEOLOCATION ERROR\");\r\n      }\r\n    );\r\n  } else {\r\n    console.log(\"Геолокация недоступна\");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={e => {\r\n        if (e.target.className !== \"SlideSideMenu\" && showSlideSideMenu) {\r\n          hideSideMenu();\r\n        }\r\n      }}\r\n    >\r\n      <Header\r\n        logo\r\n        arrow\r\n        burger\r\n        toSlideFixedHeader={isShowMenu}\r\n        showSlideSideMenu={showSlideSideMenu}\r\n        showSideMenu={showSideMenu}\r\n      />\r\n      <div className=\"navContainerMap\">\r\n        <CompanyNav\r\n          style={{ zIndex: 1 }}\r\n          currentPage=\"/map\"\r\n          clickedType={clickedType}\r\n        />\r\n        <TypeNav style={{ zIndex: 1 }} />\r\n      </div>\r\n      {isLoading && <Loader />}\r\n      {!isLoading && (\r\n        <div className=\"mapContainer\">\r\n          <GooggleMapReact\r\n            style={{\r\n              height: \"100%\",\r\n              width: \"100%\"\r\n            }}\r\n            bootstrapURLKeys={{\r\n              key: API_KEY\r\n            }}\r\n            defaultCenter={\r\n              defaultCenter || {\r\n                lat: 53.904577,\r\n                lng: 27.557328\r\n              }\r\n            }\r\n            defaultZoom={8}\r\n            yesIWantToUseGoogleMapApiInternals\r\n            onGoogleApiLoaded={({ map }) => {\r\n              mapRef.current = map;\r\n            }}\r\n            onChange={({ zoom, bounds }) => {\r\n              setZoom(zoom);\r\n              setBounds([\r\n                bounds.nw.lng,\r\n                bounds.se.lat,\r\n                bounds.se.lng,\r\n                bounds.nw.lat\r\n              ]);\r\n            }}\r\n          >\r\n            {defaultCenter && (\r\n              <Marker lat={defaultCenter.lat} lng={defaultCenter.lng}>\r\n                <img\r\n                  alt=\"me\"\r\n                  style={{ height: \"32px\", width: \"32px\" }}\r\n                  src={`${process.env.PUBLIC_URL}/img/dancer.png`}\r\n                  className=\"eye\"\r\n                />\r\n              </Marker>\r\n            )}\r\n\r\n            {clusters.map(cluster => {\r\n              const [longitude, latitude] = cluster.geometry.coordinates;\r\n              const {\r\n                cluster: isCluster,\r\n                point_count: pointCount\r\n              } = cluster.properties;\r\n\r\n              //ЗАМЕНА НА ЦИФРЫ\r\n              if (isCluster) {\r\n                return (\r\n                  <Marker\r\n                    key={cluster.properties.cluster_id}\r\n                    lat={latitude}\r\n                    lng={longitude}\r\n                  >\r\n                    <div className=\"clusterMarker\">\r\n                      <p> {pointCount}</p>\r\n                    </div>\r\n                  </Marker>\r\n                );\r\n              }\r\n\r\n              //БЕЗ ЗАМЕНЫ НА ЦИФРЫ\r\n              console.log(cluster.item, \" ITEM\");\r\n\r\n              let streamTime = \"\",\r\n                workTime = \"\",\r\n                isWork = false;\r\n\r\n              const setShowStream = time => {\r\n                streamTime = time;\r\n              };\r\n              const setWorkTime = time => {\r\n                workTime = time;\r\n              };\r\n              const setIsWork = bool => {\r\n                isWork = bool;\r\n              };\r\n\r\n              isShowStreamNow(cluster.item, setShowStream);\r\n              isWorkTimeNow(cluster.item, setWorkTime, setIsWork);\r\n\r\n              return (\r\n                <Marker\r\n                  key={cluster.properties.crimeId}\r\n                  lat={latitude}\r\n                  lng={longitude}\r\n                >\r\n                  <Link\r\n                    to={{\r\n                      pathname: `/company/${cluster.item.id}`\r\n                    }}\r\n                  >\r\n                    <div className=\"mapMarkerWrap\">\r\n                      <div className=\"mapMarker\">\r\n                        {!!streamTime && (\r\n                          <video\r\n                            className=\"companyImg1\"\r\n                            src={cluster.item.streams[0].preview}\r\n                            autoPlay\r\n                          />\r\n                        )}\r\n                        {!streamTime && (\r\n                          <div\r\n                            className=\"companyImg1\"\r\n                            style={{\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                              justifyContent: \"center\"\r\n                            }}\r\n                          >\r\n                            <p\r\n                              style={{\r\n                                color: \"#fff\",\r\n                                textAlign: \"center\",\r\n                                padding: \"3px\"\r\n                              }}\r\n                            >\r\n                              Трансляции нет\r\n                            </p>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <p className=\"mapMarkerName\">\r\n                        {cluster.item.categories[0].name} \"{cluster.item.name}\"\r\n                        <span className=\"openedTo\">\r\n                          {isWork && (\r\n                            <span> Открыто: до {workTime.split(\"-\")[1]}</span>\r\n                          )}\r\n                          {!isWork && <span> Закрыто </span>}\r\n                        </span>\r\n                      </p>\r\n                      <div className=\"arrow\"></div>\r\n                    </div>\r\n                  </Link>\r\n                </Marker>\r\n              );\r\n            })}\r\n          </GooggleMapReact>\r\n        </div>\r\n      )}\r\n\r\n      <BottomMenu toSlideFixedBottomMenu={isShowMenu} />\r\n      <SlideSideMenu isShowMenu={isShowMenu} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"]},"metadata":{},"sourceType":"module"}